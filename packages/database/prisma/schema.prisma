// Prisma schema for Firescrape - Web Scraping Playground

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output          = "../generated/client"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Core Models

model Profile {
  id      String @id @default(uuid())
  clerkId String @unique // Clerk user ID (primary identifier)

  // Basic info from Clerk
  email     String  @unique
  username  String? @unique @db.VarChar(50)
  firstName String? @db.VarChar(100)
  lastName  String? @db.VarChar(100)
  avatarUrl String? @db.Text

  // Internal tracking
  lifetimeRuns    Int      @default(0) // Total scrapes ever
  monthlyRunsUsed Int      @default(0) // Scrapes this month
  lastActiveAt    DateTime @default(now())

  // Settings - consolidated into main profile table for simplicity
  // Appearance preferences
  fontFamily String @default("inter")
  theme      String @default("system") // 'light', 'dark', 'system'

  // Scraping defaults
  defaultFormats         String[] @default(["markdown"])
  defaultOnlyMainContent Boolean  @default(true)
  defaultTimeout         Int      @default(30000) // 30 seconds

  // AI settings
  aiRules String? @db.Text // Custom extraction rules

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  scrapes  Scrape[]
  feedback Feedback[]

  @@index([clerkId])
  @@index([email])
  @@index([username])
}

model Scrape {
  id      String   @id @default(cuid())
  userId  String
  url     String   @db.Text
  status  Status   @default(PENDING)
  formats String[] // ['markdown', 'html', 'screenshot', 'json']

  // Options
  onlyMainContent   Boolean @default(true)
  includeHtml       Boolean @default(false)
  includeRawHtml    Boolean @default(false)
  includeScreenshot Boolean @default(false)
  fullPage          Boolean @default(false)
  waitFor           Int? // milliseconds
  headers           Json? // custom headers
  actions           Json? // page actions (click, scroll, etc)

  // Additional Options
  extractMainContent Boolean @default(true)
  parsePDFs          Boolean @default(false)
  useStealthMode     Boolean @default(false)
  includeLinks       Boolean @default(false)
  timeout            Int? // milliseconds
  includeOnlyTags    String? @db.Text
  excludeTags        String? @db.Text
  maxAge             Int? // seconds

  // Agent Options
  agentPrompt       String? @db.Text
  agentModel        String?
  agentSchema       Json?
  agentSystemPrompt String? @db.Text
  agentExample      String? @db.Text

  // Results
  markdown      String? @db.Text
  html          String? @db.Text
  rawHtml       String? @db.Text
  metadata      Json? // title, description, ogImage, etc
  links         Json? // extracted links
  screenshotUrl String? // URL to screenshot
  json          Json? // structured data from agent

  // Error handling
  error     String? @db.Text
  errorCode String?

  // Timing
  startedAt   DateTime?
  completedAt DateTime?
  duration    Int? // milliseconds

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user Profile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([status])
  @@index([url])
}

// Utility models

model Feedback {
  id        String             @id @default(uuid())
  topic     FeedbackTopic
  message   String
  sentiment FeedbackSentiment?
  userAgent String?
  url       String?
  userId    String?
  status    FeedbackStatus     @default(OPEN)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  user Profile? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([topic])
  @@index([status])
  @@index([createdAt])
  @@index([userId])
}

// Enums

enum Status {
  PENDING
  PROCESSING
  COMPLETE
  FAILED
}

enum FeedbackTopic {
  BUG
  FEATURE
  UI
  PERFORMANCE
  GENERAL
  API_ISSUE
  DOCUMENTATION
}

enum FeedbackSentiment {
  POSITIVE
  NEGATIVE
}

enum FeedbackStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}
